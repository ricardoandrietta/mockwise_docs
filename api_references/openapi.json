{
  "openapi": "3.0.3",
  "info": {
    "title": "Mock Data Generation API",
    "description": "API for generating mock data with specific types and repetition",
    "version": "1.0.0",
    "contact": {
      "name": "MockWise",
      "url": "https://mockwise.dev"
    }
  },
  "servers": [
    {
      "url": "https://mockwise.dev/api",
      "description": "Production server"
    }
  ],
  "security": [
    {
      "bearerAuth": []
    }
  ],
  "paths": {
    "/v1/generate": {
      "post": {
        "summary": "Generate mock data",
        "description": "Generates mock data based on specified types and repetition count",
        "operationId": "generateMockData",
        "tags": [
          "Mock Generation"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/x-www-form-urlencoded": {
              "schema": {
                "$ref": "#/components/schemas/GenerateMockRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully generated mock data",
            "content": {
              "application/json": {
                "schema": {
                  "anyOf": [
                    {
                      "type": "array",
                      "description": "By default, it returns an `array` with the requested data."
                    },
                    {
                      "type": "object",
                      "description": "Returns an `object` when `repeat = 1` AND `single_item = true`"
                    }
                  ]
                },
                "example": [
                  {
                    "first_name": "Talon",
                    "last_name": "Kilback"
                  }
                ]
              }
            }
          },
          "401": {
            "description": "Invalid token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "message": "Unauthenticated."
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Content",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                },
                "example": {
                  "error": "Invalid Argument: `schema` is required."
                }
              }
            }
          }
        }
      }
    },
    "/v1/status/{statusCode}": {
      "head": {
        "summary": "HEAD simulation",
        "deprecated": false,
        "description": "### Check Status\n\nThis endpoint sends an HTTP HEAD request to the specified URL to check the status of the resource. The `:statusCode` parameter in the URL should be replaced with the actual status code to be checked.\n\n**Request Body**  \nThis request does not require a request body.\n\n**Response Body**  \nThe response will not contain a body, as the HTTP HEAD method is used to retrieve the headers and status of the resource without receiving the actual content.",
        "tags": [
          "Status Codes"
        ],
        "parameters": [
          {
            "name": "statusCode",
            "in": "path",
            "description": "",
            "required": true,
            "example": "200",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            },
            "headers": {}
          }
        }
      },
      "get": {
        "summary": "GET simulation",
        "deprecated": false,
        "description": "### Check Status\n\nThis endpoint sends an HTTP GET request to the specified URL to check the status of the resource. The `:statusCode` parameter in the URL should be replaced with the actual status code to be checked.\n\n**Request Body**  \nThis request does not require a request body.",
        "tags": [
          "Status Codes"
        ],
        "parameters": [
          {
            "name": "statusCode",
            "in": "path",
            "description": "",
            "required": true,
            "example": "200",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "method": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message",
                    "method"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Success",
                    "value": {
                      "success": true,
                      "message": "worked",
                      "method": "GET"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "method": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message",
                    "method"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Exception",
                    "value": {
                      "success": false,
                      "message": "The HTTP status code \"700\" is not valid.",
                      "method": "GET"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        }
      },
      "delete": {
        "summary": "DELETE simulation",
        "deprecated": false,
        "description": "### Check Status\n\nThis endpoint sends an HTTP DELETE request to the specified URL to check the status of the resource. The `:statusCode` parameter in the URL should be replaced with the actual status code to be checked.\n\n**Request Body**  \nThis request does not require a request body.",
        "tags": [
          "Status Codes"
        ],
        "parameters": [
          {
            "name": "statusCode",
            "in": "path",
            "description": "",
            "required": true,
            "example": "200",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "method": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message",
                    "method"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Success",
                    "value": {
                      "success": true,
                      "message": "worked",
                      "method": "GET"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "method": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message",
                    "method"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Exception",
                    "value": {
                      "success": false,
                      "message": "The HTTP status code \"700\" is not valid.",
                      "method": "GET"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        }
      },
      "post": {
        "summary": "POST simulation",
        "deprecated": false,
        "description": "### Check Status\n\nThis endpoint sends an HTTP POST request to the specified URL to check the status of the resource. The `:statusCode` parameter in the URL should be replaced with the actual status code to be checked.\n\n**Request Body**  \nThis request does not require a request body.",
        "tags": [
          "Status Codes"
        ],
        "parameters": [
          {
            "name": "statusCode",
            "in": "path",
            "description": "",
            "required": true,
            "example": "200",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "method": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message",
                    "method"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Success",
                    "value": {
                      "success": true,
                      "message": "worked",
                      "method": "POST"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "method": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message",
                    "method"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Exception",
                    "value": {
                      "success": false,
                      "message": "The HTTP status code \"700\" is not valid.",
                      "method": "POST"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        }
      },
      "put": {
        "summary": "PUT simulation",
        "deprecated": false,
        "description": "### Check Status\n\nThis endpoint sends an HTTP PUT request to the specified URL to check the status of the resource. The `:statusCode` parameter in the URL should be replaced with the actual status code to be checked.\n\n**Request Body**  \nThis request does not require a request body.",
        "tags": [
          "Status Codes"
        ],
        "parameters": [
          {
            "name": "statusCode",
            "in": "path",
            "description": "",
            "required": true,
            "example": "200",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "method": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message",
                    "method"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Success",
                    "value": {
                      "success": true,
                      "message": "worked",
                      "method": "PUT"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "method": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message",
                    "method"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Exception",
                    "value": {
                      "success": false,
                      "message": "The HTTP status code \"700\" is not valid.",
                      "method": "PUT"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        }
      },
      "patch": {
        "summary": "PATCH simulation",
        "deprecated": false,
        "description": "### Check Status\n\nThis endpoint sends an HTTP PATCH request to the specified URL to check the status of the resource. The `:statusCode` parameter in the URL should be replaced with the actual status code to be checked.\n\n**Request Body**  \nThis request does not require a request body.",
        "tags": [
          "Status Codes"
        ],
        "parameters": [
          {
            "name": "statusCode",
            "in": "path",
            "description": "",
            "required": true,
            "example": "200",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "method": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message",
                    "method"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Success",
                    "value": {
                      "success": true,
                      "message": "worked",
                      "method": "PUT"
                    }
                  }
                }
              }
            },
            "headers": {}
          },
          "500": {
            "description": "",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean"
                    },
                    "message": {
                      "type": "string"
                    },
                    "method": {
                      "type": "string"
                    }
                  },
                  "required": [
                    "success",
                    "message",
                    "method"
                  ]
                },
                "examples": {
                  "1": {
                    "summary": "Exception",
                    "value": {
                      "success": false,
                      "message": "The HTTP status code \"700\" is not valid.",
                      "method": "PATCH"
                    }
                  }
                }
              }
            },
            "headers": {}
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "GenerateMockRequest": {
        "type": "object",
        "required": [
          "schema"
        ],
        "properties": {
          "schema" : {
            "type": "object",
            "properties": {
              "locale": {
                "type": "string",
                "default": "en_US",
                "description": "Locale",
                "example":  "pt_BR"
              },
              "repeat": {
                "type": "integer",
                "minimum": 1,
                "maximum": 100,
                "default": 1,
                "description": "Number of mock data entries to generate",
                "example": 1
              },
              "show_errors": {
                "type": "boolean",
                "description": "It adds the `errors` key to the response showing any found error in your schema",
                "default": false
              },
              "single_item": {
                "type": "boolean",
                "description": "When 1, it returns a object, otherwise returns an array. if repeat > 1, it will always return an array",
                "default": true
              },
              "wrap": {
                "type": "string",
                "description": "If set, it will wrap the response in the given wrap string",
                "default": null
              },
              "mock": {
                "type": "object",
                "description": "For the definition of mock's properties, please see the [Specification Tab](/mock_specification)",
                "example": {
                  "first_name": {
                    "type": "firstName"
                  },
                  "last_name": {
                    "type": "lastName"
                  }
                }
              }
            },
            "required": ["mock"]
          }
        }
      }
    },
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "tags": [
    {
      "name": "Mock Generation",
      "description": "Endpoints for generating mock data"
    },
    {
      "name": "Status Codes",
      "description": "Endpoints simulating HTTP status codes"
    }
  ]
}